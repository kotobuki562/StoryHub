generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEXT_PUBLIC_TEST_DATABASE_URL")
  // url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id         String     @id @unique @default(uuid())
  user_name  String?
  user_deal  String?
  links      Json?
  image      String?
  created_at DateTime   @default(now())
  updated_at DateTime?
  stories    Story[]
  reviews    Review[]
  follows    Follow[]
  favorites  Favorite[]
  categories Category[]
}

model Review {
  id           String    @id @unique @default(uuid())
  user_id      String
  story_id     String
  review_title String
  review_body  String
  stars        Int       @default(0)
  publish      Boolean   @default(false) @db.Boolean
  created_at   DateTime  @default(now())
  updated_at   DateTime?
  user         User?     @relation(fields: [user_id], references: [id])
  story        Story?    @relation(fields: [story_id], references: [id])
}

model Follow {
  id         Int      @id @unique @default(autoincrement())
  user_id    String?
  follow_id  String?
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])
}

model Favorite {
  id         Int      @id @unique @default(autoincrement())
  user_id    String
  story_id   String
  created_at DateTime @default(now())
  user       User?    @relation(fields: [user_id], references: [id])
  story      Story?   @relation(fields: [story_id], references: [id])
}

model Story {
  id               String     @id @unique @default(uuid())
  user_id          String
  story_title      String
  story_synopsis   String?
  story_image      String?
  story_categories String[]
  publish          Boolean    @default(false) @db.Boolean
  created_at       DateTime   @default(now())
  updated_at       DateTime?
  seasons          Season[]
  reviews          Review[]
  favorites        Favorite[]
  user             User?      @relation(fields: [user_id], references: [id])
}

model Season {
  id                String    @id @unique @default(uuid())
  story_id          String
  season_title      String
  season_image      String?
  season_synopsis   String?
  season_categories String[]
  publish           Boolean   @default(false) @db.Boolean
  created_at        DateTime  @default(now())
  updated_at        DateTime?
  episodes          Episode[]
  story             Story?    @relation(fields: [story_id], references: [id])
}

model Episode {
  id               String    @id @unique @default(uuid())
  season_id        String
  episode_title    String
  episode_image    String?
  episode_synopsis String?
  publish          Boolean   @default(false) @db.Boolean
  created_at       DateTime  @default(now())
  updated_at       DateTime?
  chapters         Chapter[]
  season           Season?   @relation(fields: [season_id], references: [id])
}

model Chapter {
  id            String    @id @unique @default(uuid())
  episode_id    String
  chapter_title String
  chapter_image String?
  publish       Boolean   @default(false) @db.Boolean
  created_at    DateTime  @default(now())
  updated_at    DateTime?
  pages         Page[]
  episode       Episode?  @relation(fields: [episode_id], references: [id])
}

model Page {
  id         String    @id @unique @default(uuid())
  chapter_id String
  page_body  String
  created_at DateTime  @default(now())
  updated_at DateTime?
  chapter    Chapter?  @relation(fields: [chapter_id], references: [id])
}

model Category {
  id             Int      @id @unique @default(autoincrement())
  user_id        String?
  category_title String
  created_at     DateTime @default(now())
  user           User?    @relation(fields: [user_id], references: [id])
}
